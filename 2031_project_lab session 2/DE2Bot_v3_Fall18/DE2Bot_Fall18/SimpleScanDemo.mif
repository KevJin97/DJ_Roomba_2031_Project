-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 293B;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0AD4;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 1141;  -- 	STORE  DVel        ; Reset API variables
           009 : 1140;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 82BC;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 829E;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4AE3;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4AE0;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4AE0;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 12D2;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 52D2;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4AE1;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0AD4;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A002;  -- 	CLI    &B0010      ; disable the movement API interrupt
           027 : 80EB;  -- 	CALL   AcquireData ; perform a 360 degree scan
           028 : B800;  -- 	LOADI  0
           029 : 1141;  -- 	STORE  DVel        ; zero desired forward velocity
           02A : 90C2;  -- 	IN     THETA
           02B : 1140;  -- 	STORE  DTheta      ; desired heading = current heading
           02C : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02D : 8117;  -- 	CALL   FindClosest
           02E : 9805;  -- 	OUT    SSEG2       ; useful debugging info
           02F : 1140;  -- 	STORE  DTheta ; look at closest reading 
           030 : 8298;  -- 	CALL WAIT1 ; WAIT TO MAKE SURE VELOCITY RECORDS CHANGE
           031 : 0940;  -- 	LOAD DTheta 
           032 : 6FF8;  -- 	ADDI -8
           033 : 1140;  -- 	STORE DTheta ; Add 8 degree offset to DTheta, seems to correct for most error 
           034 : 8298;  -- 	CALL WAIT1 ; prepare for velocity changed
           035 : BF38;  -- 	LOADI  -200 ; reverse
           036 : 1141;  -- 	STORE DVel ;GO!
           037 : B800;  -- 	LOADI 0
           038 : 12FB;  -- 	STORE State1Checker
           039 : 0AFB;  -- checkState:	LOAD State1Checker
           03A : 9805;  -- 			OUT SSEG2
           03B : 6FD8;  -- 			ADDI -40
           03C : 383E;  -- 			JPOS checkStateEnd
           03D : 2839;  -- 			JUMP checkState
           03E : 0AD4;  -- checkStateEnd: LOAD Zero
           03F : 1141;  -- 			   STORE DVel
           040 : 8298;  -- 			   CALL WAIT1	
           041 : 8298;  -- 	CALL WAIT1	   
           042 : 4800;  -- 	AND 0
           043 : A002;  -- 	CLI    &B0010 
           044 : 80EB;  -- 	CALL   AcquireData 
           045 : B800;  -- 	LOADI  0
           046 : 1141;  -- 	STORE  DVel
           047 : 90C2;  -- 	IN     THETA
           048 : 1140;  -- 	STORE  DTheta 
           049 : A802;  -- 	SEI    &B0010
           04A : 8117;  -- 	CALL FindClosest
           04B : 1140;  -- 	STORE DTheta
           04C : 8298;  -- 	CALL WAIT1
           04D : 0940;  -- 	LOAD DTheta 
           04E : 6FF8;  -- 	ADDI -8
           04F : 1140;  -- 	STORE DTheta
           050 : 4800;  -- 	AND 0
           051 : B92C;  -- 	LOADI 300
           052 : 1141;  -- 	STORE DVel
           053 : 0AE2;  -- 	LOAD Mask3
           054 : 98B2;  -- 	OUT SONAREN	
           055 : 90AB;  -- 	IN Dist3
           056 : 6ED4;  -- 	ADDI -300
           057 : 3059;  -- 	JNEG EXIT1
           058 : 2855;  -- 	JUMP forNow
           059 : B800;  -- 	LOADI 0
           05A : 1141;  -- 	STORE DVel   
           05B : 80DA;  -- 	CALL PingLeft
           05C : 08E8;  -- 	LOAD LeftDist
           05D : 9804;  -- 	OUT SSEG1
           05E : 80E1;  -- 	CALL PingRight 
           05F : 08E9;  -- 	LOAD RightDist
           060 : 9805;  -- 	OUT SSEG2
           061 : 08E8;  -- 	LOAD LeftDist
           062 : 18E9;  -- 	ADD RightDist
           063 : 106D;  -- 	STORE lrsum
           064 : 206E;  -- 	SUB legdist ; will figure out later
           065 : 3093;  -- 	JNEG CASE3LEG
           066 : 086D;  -- 	LOAD lrsum
           067 : 2070;  -- 	SUB case3val
           068 : 38A4;  -- 	JPOS CASE3POST
           069 : 086D;  -- 	LOAD lrsum
           06A : 206F;  -- 	SUB discase
           06B : 3082;  -- 	JNEG CASE2
           06C : 3871;  -- 	JPOS CASE1			
           06D : 0000;  -- lrsum: DW	0
           06E : 07D0;  -- legdist: DW 2000 ;FIGURe OUT DISTANCE BETWEEN LEGS IN DeSKS
           06F : 0FA0;  -- discase: DW 4000
           070 : 1770;  -- case3val: DW 6000 ; DISTANCE BETWEEN CASE 1 PillaRS (PLEASE CheCK aCTUAL diSTANCE)
           071 : B8C1;  -- 	LOADI 193 ;C1 in hex
           072 : 9804;  -- 	OUT SSEG1 ;Show that we're in C1
           073 : 8298;  -- 	CALL WAIT1
           074 : BED4;  -- 	LOADI -300
           075 : 1141;  -- 	STORE DVel
           076 : B800;  -- 	LOADI 0
           077 : 12FB;  -- 	STORE State1Checker
           078 : 0AFB;  -- 	LOAD State1Checker
           079 : 6FC4;  -- 	ADDI -60  
           07A : 387C;  -- 	JPOS SecondExit
           07B : 2878;  -- 	JUMP SecondMove
           07C : B800;  -- SecondExit: LOADI 0
           07D : 1141;  -- 			STORE DVel 
           07E : 0940;  -- 			LOAD DTheta
           07F : 685A;  -- 			ADDI 90
           080 : 1140;  -- 			STORE DTheta
           081 : 28B5;  -- 			JUMP FindHome
           082 : B8C2;  -- 	LOADI 194 ;C2 in hex
           083 : 9804;  -- 	OUT SSEG1 ;Show that we're in C2
           084 : 0940;  -- 	LOAD DTHETA ;spin around
           085 : 6F54;  -- 	ADDI -172 ;always overrotates -> should correct
           086 : 1140;  -- 	STORE DTHETA ; face that direction
           087 : 8298;  -- 	CALL WAIT1
           088 : B92C;  -- 	LOADI 300
           089 : 1141;  -- 	STORE DVel
           08A : B800;  -- 	LOADI 0
           08B : 12FB;  -- 	STORE State1Checker
           08C : 0AFB;  -- 	LOAD State1Checker
           08D : 6FEC;  -- 	ADDI -20  
           08E : 3890;  -- 	JPOS SecondExit0
           08F : 288C;  -- 	JUMP SecondMove0
           090 : B800;  -- SecondExit0: LOADI 0
           091 : 1141;  -- 			STORE DVel
           092 : 28B5;  -- 	JUMP FindHome
           093 : B8C3;  -- 	LOADI 195	;C3 in hex
           094 : 9804;  -- 	OUT SSEG1	;show c3
           095 : 8298;  -- 	CALL WAIT1
           096 : BED4;  -- 	LOADI -300
           097 : 1141;  -- 	STORE DVel
           098 : B800;  -- 	LOADI 0
           099 : 12FB;  -- 	STORE State1Checker
           09A : 0AFB;  -- 	LOAD State1Checker
           09B : 6FC4;  -- 	ADDI -60  
           09C : 389E;  -- 	JPOS SecondExit1
           09D : 289A;  -- 	JUMP SecondMove1
           09E : B800;  -- SecondExit1: LOADI 0
           09F : 1141;  -- 			STORE DVel 
           0A0 : 0940;  -- 			LOAD DTheta
           0A1 : 6FA6;  -- 			ADDI -90
           0A2 : 1140;  -- 			STORE DTheta
           0A3 : 28B5;  -- 			JUMP FindHome
           0A4 : B8C4;  -- 	LOADI 196	;C3 in hex
           0A5 : 9804;  -- 	OUT SSEG1	;show c3
           0A6 : 8298;  -- 	CALL WAIT1
           0A7 : BED4;  -- 	LOADI -300
           0A8 : 1141;  -- 	STORE DVel
           0A9 : B800;  -- 	LOADI 0
           0AA : 12FB;  -- 	STORE State1Checker
           0AB : 0AFB;  -- 	LOAD State1Checker
           0AC : 6FD3;  -- 	ADDI -45  
           0AD : 389E;  -- 	JPOS SecondExit1
           0AE : 289A;  -- 	JUMP SecondMove1
           0AF : B800;  -- SecondExit2: LOADI 0
           0B0 : 1141;  -- 			STORE DVel 
           0B1 : 0940;  -- 			LOAD DTheta
           0B2 : 6FA6;  -- 			ADDI -90
           0B3 : 1140;  -- 			STORE DTheta
           0B4 : 28B5;  -- 			JUMP FindHome
           0B5 : B92C;  --     LOADI 300
           0B6 : 1141;  --     STORE DVel
           0B7 : 8298;  -- 	CALL WAIT1
           0B8 : 0AE4;  -- 	LOAD Mask5
           0B9 : 98B2;  -- 	OUT SONAREN	;PING TO THE RIGHT
           0BA : 8298;  -- 	CALL WAIT1
           0BB : 90AD;  -- 	IN Dist5
           0BC : 10E9;  -- 	STORE RightDist
           0BD : 8298;  -- 	CALL WAIT1
           0BE : 0AE4;  --     LOAD Mask5
           0BF : 98B2;  --     OUT SONAREN	;PING TO THE RIGHT
           0C0 : 8298;  --     CALL WAIT1
           0C1 : 90AD;  -- 	IN Dist5
           0C2 : 10EA;  -- 	STORE currPing
           0C3 : 9804;  -- 	OUT SSEG1
           0C4 : 08EA;  -- 	LOAD currPing
           0C5 : 20E9;  -- 	SUB RightDist
           0C6 : 6864;  -- 	ADDI 100					;**************************need to check if it is enough distance to recognize pillr and the wall or double check the distance
           0C7 : 9805;  -- 	OUT SSEG2
           0C8 : 30CA;  -- 	JNEG EXIT2
           0C9 : 28BD;  -- 	JUMP forNow1
           0CA : B800;  -- 	LOADI 0
           0CB : 1141;  -- 	STORE Dvel										;**********************************not sure why we need to stop
           0CC : 8298;  -- 	CALL WAIT1 ; prepare for velocity changed
           0CD : B92C;  -- 	LOADI  300 ; foward
           0CE : 1141;  -- 	STORE DVel ;GO!
           0CF : B800;  -- 	LOADI 0
           0D0 : 12FB;  -- 	STORE State1Checker
           0D1 : 0AFB;  -- 	LOAD State1Checker
           0D2 : 9805;  -- 	OUT SSEG2										; print 0 = right before getting home.
           0D3 : 6FD8;  -- 	ADDI -40 ; EDIT VALuE AS NECeSSARY For MOVE
           0D4 : 38D6;  -- 	JPOS checkStateEnd1
           0D5 : 28D1;  -- 	JUMP checkState1
           0D6 : B800;  -- 	LOADI 0
           0D7 : 1141;  -- 	STORE DVel
           0D8 : 28D9;  -- 	JUMP InfLoop
           0D9 : 28D9;  -- 	JUMP   InfLoop
           0DA : 8298;  -- 	CALL WAIT1
           0DB : 0ADF;  -- 	LOAD Mask0
           0DC : 98B2;  -- 	OUT SONAREN
           0DD : 8298;  -- 	CALL WAIT1
           0DE : 90A8;  -- 	IN Dist0
           0DF : 10E8;  -- 	STORE LeftDist
           0E0 : 8800;  -- 	RETURN 
           0E1 : 8298;  -- 	CALL WAIT1
           0E2 : 0AE4;  -- 	LOAD Mask5
           0E3 : 98B2;  -- 	OUT SONAREN
           0E4 : 8298;  -- 	CALL WAIT1
           0E5 : 90AD;  -- 	IN Dist5
           0E6 : 10E9;  -- 	STORE RightDist
           0E7 : 8800;  -- 	RETURN 
           0E8 : 0000;  -- LeftDist:	DW	0
           0E9 : 0000;  -- RightDist:	DW	0
           0EA : 0000;  -- currPing:	DW	0
           0EB : 90C2;  -- 	IN     THETA
           0EC : 1114;  -- 	STORE  OrigTheta
           0ED : 1115;  -- 	STORE  CurrTheta
           0EE : 0AD4;  -- 	LOAD   Zero
           0EF : 1116;  -- 	STORE  TurnTracker
           0F0 : 0ADF;  -- 	LOAD   Mask0
           0F1 : 98B2;  -- 	OUT    SONAREN
           0F2 : 0AF2;  -- 	LOAD   FSlow
           0F3 : 988B;  -- 	OUT    RVELCMD
           0F4 : 0AF3;  -- 	LOAD   RSlow
           0F5 : 9883;  -- 	OUT    LVELCMD
           0F6 : 90C2;  -- 	IN     Theta
           0F7 : 5915;  -- 	XOR    CurrTheta
           0F8 : 40F2;  -- 	JZERO  ADWait      ; same angle; wait until turned more
           0F9 : 90C2;  -- 	IN     Theta
           0FA : 2114;  -- 	SUB    OrigTheta
           0FB : 819E;  -- 	CALL   Abs
           0FC : 68B4;  -- 	ADDI   180         ; account for angle wrapping
           0FD : 8198;  -- 	CALL   Mod360
           0FE : 6F4C;  -- 	ADDI   -180
           0FF : 819E;  -- 	CALL   Abs
           100 : 6FF6;  -- 	ADDI   -10         ; 10 degree margin
           101 : 3104;  -- 	JNEG   ADStore     ; margin not passed
           102 : B801;  -- 	LOADI  1           ; margin passed
           103 : 1116;  -- 	STORE  TurnTracker
           104 : 90C2;  -- 	IN     THETA
           105 : 1115;  -- 	STORE  CurrTheta   ; update current angle
           106 : 685A;  -- 	ADDI   90          ; since this sonar is facing left
           107 : 8198;  -- 	CALL   Mod360      ; wrap angles >360
           108 : 6AFC;  -- 	ADDI   DataArray   ; index into the array
           109 : 1113;  -- 	STORE  ArrayIndex
           10A : 90A8;  -- 	IN     DIST0
           10B : 7913;  -- 	ISTORE ArrayIndex  ; store this data point
           10C : 0916;  -- 	LOAD   TurnTracker
           10D : 40F2;  -- 	JZERO  ADWait      ; haven't turned at all
           10E : 90C2;  -- 	IN     THETA
           10F : 5914;  -- 	XOR    OrigTheta
           110 : 38F2;  -- 	JPOS   ADWait
           111 : 30F2;  -- 	JNEG   ADWait
           112 : 8800;  -- 	RETURN ; done
           113 : 0000;  -- 	ArrayIndex: DW 0
           114 : 0000;  -- 	OrigTheta: DW 0
           115 : 0000;  -- 	CurrTheta: DW 0
           116 : 0000;  -- 	TurnTracker: DW 0
           117 : BAFC;  -- 	LOADI  DataArray   ; get the array start address
           118 : 1113;  -- 	STORE  ArrayIndex
           119 : 1130;  -- 	STORE  CloseIndex  ; keep track of shortest distance
           11A : 6968;  -- 	ADDI   360
           11B : 112F;  -- 	STORE  EndIndex
           11C : 7113;  -- 	ILOAD  ArrayIndex  ; get the first entry of array
           11D : 1131;  -- 	STORE  CloseVal    ; keep track of shortest distance
           11E : 0913;  -- 	LOAD   ArrayIndex
           11F : 6801;  -- 	ADDI   1
           120 : 1113;  -- 	STORE  ArrayIndex  ; move to next entry
           121 : 592F;  -- 	XOR    EndIndex    ; compare with end index
           122 : 412B;  -- 	JZERO  FCDone
           123 : 7113;  -- 	ILOAD  ArrayIndex  ; get the data
           124 : 2131;  -- 	SUB    CloseVal    ; compare with current min
           125 : 391E;  -- 	JPOS   FCLoop      ; not closer; move on
           126 : 7113;  -- 	ILOAD  ArrayIndex  ; new minimum
           127 : 1131;  -- 	STORE  CloseVal
           128 : 0913;  -- 	LOAD   ArrayIndex
           129 : 1130;  -- 	STORE  CloseIndex
           12A : 291E;  -- 	JUMP   FCLoop
           12B : BAFC;  -- 	LOADI  DataArray   ; start address
           12C : 2130;  -- 	SUB    CloseIndex  ; start address - entry address
           12D : 819F;  -- 	CALL   Neg         ; entry address - start address
           12E : 8800;  -- 	RETURN
           12F : 0000;  -- 	EndIndex:   DW 0
           130 : 0000;  -- 	CloseIndex: DW 0
           131 : 0000;  -- 	CloseVal:   DW 0
           132 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           133 : 0AD4;  -- 	LOAD   Zero        ; Stop everything.
           134 : 9883;  -- 	OUT    LVELCMD
           135 : 988B;  -- 	OUT    RVELCMD
           136 : 98B2;  -- 	OUT    SONAREN
           137 : 093A;  -- 	LOAD   DEAD        ; An indication that we are dead
           138 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           139 : 2939;  -- 	JUMP   Forever     ; Do this forever.
           13A : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           13B : 8142;  -- 	CALL   ControlMovement
           13C : 0AFB;  -- 	LOAD State1Checker
           13D : 6801;  -- 	ADDI 1
           13E : 12FB;  -- 	STORE State1Checker
           13F : B000;  -- 	RETI   ; return from ISR
           140 : 0000;  -- DTheta:    DW 0
           141 : 0000;  -- DVel:      DW 0
           142 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           143 : 1182;  -- 	STORE  MaxVal
           144 : 816F;  -- 	CALL   GetThetaErr ; get the heading error
           145 : 6002;  -- 	SHIFT  2
           146 : 116C;  -- 	STORE  CMAErr      ; hold temporarily
           147 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           148 : 8176;  -- 	CALL   CapValue    ; get a +/- max of 50
           149 : 196C;  -- 	ADD    CMAErr
           14A : 116C;  -- 	STORE  CMAErr      ; now contains a desired differential
           14B : B9FE;  -- 	LOADI  510
           14C : 1182;  -- 	STORE  MaxVal
           14D : 0941;  -- 	LOAD   DVel
           14E : 8176;  -- 	CALL   CapValue    ; ensure velocity is valid
           14F : 1141;  -- 	STORE  DVel        ; overwrite any invalid input
           150 : 196C;  -- 	ADD    CMAErr
           151 : 8176;  -- 	CALL   CapValue    ; ensure velocity is valid
           152 : 116E;  -- 	STORE  CMAR
           153 : 096C;  -- 	LOAD   CMAErr
           154 : 819F;  -- 	CALL   Neg         ; left wheel gets negative differential
           155 : 1941;  -- 	ADD    DVel
           156 : 8176;  -- 	CALL   CapValue
           157 : 116D;  -- 	STORE  CMAL
           158 : 096C;  -- 	LOAD   CMAErr
           159 : 6001;  -- 	SHIFT  1           ; double the differential
           15A : 116C;  -- 	STORE  CMAErr
           15B : 096E;  -- 	LOAD   CMAR
           15C : 216D;  -- 	SUB    CMAL        ; calculate the actual differential
           15D : 216C;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           15E : 4167;  -- 	JZERO  CMADone
           15F : 116C;  -- 	STORE  CMAErr      ; the missing part
           160 : 196D;  -- 	ADD    CMAL
           161 : 8176;  -- 	CALL   CapValue
           162 : 116D;  -- 	STORE  CMAL
           163 : 096E;  -- 	LOAD   CMAR
           164 : 216C;  -- 	SUB    CMAErr
           165 : 8176;  -- 	CALL   CapValue
           166 : 116E;  -- 	STORE  CMAR
           167 : 096D;  -- 	LOAD   CMAL
           168 : 9883;  -- 	OUT    LVELCMD
           169 : 096E;  -- 	LOAD   CMAR
           16A : 988B;  -- 	OUT    RVELCMD
           16B : 8800;  -- 	RETURN
           16C : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           16D : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           16E : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           16F : 90C2;  -- 	IN     THETA
           170 : 2140;  -- 	SUB    DTheta      ; actual - desired angle
           171 : 819F;  -- 	CALL   Neg         ; desired - actual angle
           172 : 68B4;  -- 	ADDI   180
           173 : 8198;  -- 	CALL   Mod360
           174 : 6F4C;  -- 	ADDI   -180
           175 : 8800;  -- 	RETURN
           176 : 2182;  -- 	SUB     MaxVal
           177 : 397D;  -- 	JPOS    CapVelHigh
           178 : 1982;  -- 	ADD     MaxVal
           179 : 1982;  -- 	ADD     MaxVal
           17A : 317F;  -- 	JNEG    CapVelLow
           17B : 2182;  -- 	SUB     MaxVal
           17C : 8800;  -- 	RETURN
           17D : 0982;  -- 	LOAD    MaxVal
           17E : 8800;  -- 	RETURN
           17F : 0982;  -- 	LOAD    MaxVal
           180 : 819F;  -- 	CALL    Neg
           181 : 8800;  -- 	RETURN
           182 : 01FE;  -- 	MaxVal: DW 510
           183 : BAFC;  -- 	LOADI   DataArray
           184 : 1113;  -- 	STORE   ArrayIndex
           185 : 6968;  -- 	ADDI    360
           186 : 12D2;  -- 	STORE   Temp        ; Also store the end address
           187 : 9099;  -- 	IN      UART_RDY    ; get the UART status
           188 : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           189 : 3987;  -- 	JPOS    SDLoop1
           18A : 7113;  -- 	ILOAD   ArrayIndex
           18B : 6018;  -- 	SHIFT   -8          ; move high byte to low byte
           18C : 9898;  -- 	OUT     UART_DAT
           18D : 9099;  -- 	IN      UART_RDY    ; get the UART status
           18E : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           18F : 398D;  -- 	JPOS    SDLoop2
           190 : 7113;  -- 	ILOAD   ArrayIndex
           191 : 9898;  -- 	OUT     UART_DAT    ; send low byte
           192 : 0913;  -- 	LOAD    ArrayIndex
           193 : 6801;  -- 	ADDI    1           ; increment index
           194 : 1113;  -- 	STORE   ArrayIndex
           195 : 22D2;  -- 	SUB     Temp        ; check if at end of array
           196 : 3187;  -- 	JNEG    SDLoop1
           197 : 2932;  -- 	JUMP    Die         ; when done, go to infinite loop
           198 : 319B;  -- 	JNEG   M360N
           199 : 6E98;  -- 	ADDI   -360
           19A : 2998;  -- 	JUMP   Mod360
           19B : 6968;  -- 	ADDI   360
           19C : 319B;  -- 	JNEG   M360N
           19D : 8800;  -- 	RETURN
           19E : 39A1;  -- 	JPOS   Abs_r
           19F : 5AD3;  -- 	XOR    NegOne       ; Flip all bits
           1A0 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1A1 : 8800;  -- 	RETURN
           1A2 : 0A02;  -- 	LOAD   AtanY
           1A3 : 819E;  -- 	CALL   Abs          ; abs(y)
           1A4 : 1204;  -- 	STORE  AtanT
           1A5 : 0A01;  -- 	LOAD   AtanX        ; abs(x)
           1A6 : 819E;  -- 	CALL   Abs
           1A7 : 2204;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           1A8 : 31B3;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           1A9 : 0A01;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           1AA : 31B0;  -- 	JNEG   A2_R3
           1AB : 81C2;  -- 	CALL   A2_calc      ; Octants 1, 8
           1AC : 31AE;  -- 	JNEG   A2_R1n
           1AD : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           1AE : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           1AF : 8800;  -- 	RETURN
           1B0 : 81C2;  -- 	CALL   A2_calc      ; Octants 4, 5            
           1B1 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           1B2 : 8800;  -- 	RETURN
           1B3 : 0A02;  -- 	LOAD   AtanY        ; Swap input arguments
           1B4 : 1204;  -- 	STORE  AtanT
           1B5 : 0A01;  -- 	LOAD   AtanX
           1B6 : 1202;  -- 	STORE  AtanY
           1B7 : 0A04;  -- 	LOAD   AtanT
           1B8 : 1201;  -- 	STORE  AtanX
           1B9 : 39BE;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           1BA : 81C2;  -- 	CALL   A2_calc      ; else octants 6, 7
           1BB : 819F;  -- 	CALL   Neg          ; Negatge the number
           1BC : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           1BD : 8800;  -- 	RETURN
           1BE : 81C2;  -- 	CALL   A2_calc      ; Octants 2, 3
           1BF : 819F;  -- 	CALL   Neg          ; negate the angle
           1C0 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           1C1 : 8800;  -- 	RETURN
           1C2 : 0A02;  -- 	LOAD   AtanY
           1C3 : 1261;  -- 	STORE  d16sN        ; Y in numerator
           1C4 : 0A01;  -- 	LOAD   AtanX
           1C5 : 1262;  -- 	STORE  d16sD        ; X in denominator
           1C6 : 81EE;  -- 	CALL   A2_div       ; divide
           1C7 : 0A67;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1C8 : 1203;  -- 	STORE  AtanRatio
           1C9 : 122A;  -- 	STORE  m16sA
           1CA : 122B;  -- 	STORE  m16sB
           1CB : 81E5;  -- 	CALL   A2_mult      ; X^2
           1CC : 122A;  -- 	STORE  m16sA
           1CD : 0A05;  -- 	LOAD   A2c
           1CE : 122B;  -- 	STORE  m16sB
           1CF : 81E5;  -- 	CALL   A2_mult
           1D0 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           1D1 : 1262;  -- 	STORE  d16sD
           1D2 : 0A03;  -- 	LOAD   AtanRatio
           1D3 : 1261;  -- 	STORE  d16sN        ; Ratio in numerator
           1D4 : 81EE;  -- 	CALL   A2_div       ; divide
           1D5 : 0A67;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1D6 : 122A;  -- 	STORE  m16sA        ; <= result in radians
           1D7 : 0A06;  -- 	LOAD   A2cd         ; degree conversion factor
           1D8 : 122B;  -- 	STORE  m16sB
           1D9 : 81E5;  -- 	CALL   A2_mult      ; convert to degrees
           1DA : 1204;  -- 	STORE  AtanT
           1DB : 6017;  -- 	SHIFT  -7           ; check 7th bit
           1DC : 4AD5;  -- 	AND    One
           1DD : 41E2;  -- 	JZERO  A2_rdwn      ; round down
           1DE : 0A04;  -- 	LOAD   AtanT
           1DF : 6018;  -- 	SHIFT  -8
           1E0 : 6801;  -- 	ADDI   1            ; round up
           1E1 : 8800;  -- 	RETURN
           1E2 : 0A04;  -- 	LOAD   AtanT
           1E3 : 6018;  -- 	SHIFT  -8           ; round down
           1E4 : 8800;  -- 	RETURN
           1E5 : 8207;  -- 	CALL   Mult16s
           1E6 : 0A2F;  -- 	LOAD   mres16sH
           1E7 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1E8 : 122F;  -- 	STORE  mres16sH
           1E9 : 0A2E;  -- 	LOAD   mres16sL
           1EA : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1EB : 4AE7;  -- 	AND    LowByte
           1EC : 522F;  -- 	OR     mres16sH     ; combine high and low words of result
           1ED : 8800;  -- 	RETURN
           1EE : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1EF : 1204;  -- 	STORE  AtanT
           1F0 : 0A04;  -- 	LOAD   AtanT
           1F1 : 6FFF;  -- 	ADDI   -1
           1F2 : 39F5;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1F3 : 8230;  -- 	CALL   Div16s       ; do the standard division
           1F4 : 8800;  -- 	RETURN
           1F5 : 1204;  -- 	STORE  AtanT
           1F6 : 0A61;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1F7 : 6001;  -- 	SHIFT  1
           1F8 : 5A61;  -- 	XOR    d16sN        ; if the sign changed,
           1F9 : 31FD;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1FA : 5A61;  -- 	XOR    d16sN        ; get back shifted version
           1FB : 1261;  -- 	STORE  d16sN
           1FC : 29F0;  -- 	JUMP   A2_DL
           1FD : 0A62;  -- 	LOAD   d16sD
           1FE : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1FF : 1262;  -- 	STORE  d16sD
           200 : 29F0;  -- 	JUMP   A2_DL
           201 : 0000;  -- AtanX:      DW 0
           202 : 0000;  -- AtanY:      DW 0
           203 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           204 : 0000;  -- AtanT:      DW 0        ; temporary value
           205 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           206 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           207 : B800;  -- 	LOADI  0
           208 : 122C;  -- 	STORE  m16sc        ; clear carry
           209 : 122F;  -- 	STORE  mres16sH     ; clear result
           20A : B810;  -- 	LOADI  16           ; load 16 to counter
           20B : 122D;  -- 	STORE  mcnt16s      
           20C : 0A2C;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           20D : 4211;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           20E : 0A2F;  -- 	LOAD   mres16sH     ; if a carry, 
           20F : 1A2A;  -- 	ADD    m16sA        ;  add multiplicand to result H
           210 : 122F;  -- 	STORE  mres16sH
           211 : 0A2B;  -- 	LOAD   m16sB
           212 : 4AD5;  -- 	AND    One          ; check bit 0 of multiplier
           213 : 122C;  -- 	STORE  m16sc        ; save as next carry
           214 : 4218;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           215 : 0A2F;  -- 	LOAD   mres16sH     ; if bit 0 set,
           216 : 222A;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           217 : 122F;  -- 	STORE  mres16sH
           218 : 0A2B;  -- 	LOAD   m16sB
           219 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           21A : 4A29;  -- 	AND    c7FFF        ; clear msb
           21B : 122B;  -- 	STORE  m16sB
           21C : 0A2F;  -- 	LOAD   mres16sH     ; load result H
           21D : 600F;  -- 	SHIFT  15           ; move lsb to msb
           21E : 522B;  -- 	OR     m16sB
           21F : 122B;  -- 	STORE  m16sB        ; result L now includes carry out from H
           220 : 0A2F;  -- 	LOAD   mres16sH
           221 : 6011;  -- 	SHIFT  -1
           222 : 122F;  -- 	STORE  mres16sH     ; shift result H >>1
           223 : 0A2D;  -- 	LOAD   mcnt16s
           224 : 6FFF;  -- 	ADDI   -1           ; check counter
           225 : 3A0B;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           226 : 0A2B;  -- 	LOAD   m16sB
           227 : 122E;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           228 : 8800;  -- 	RETURN              ; Done
           229 : 7FFF;  -- c7FFF: DW &H7FFF
           22A : 0000;  -- m16sA: DW 0 ; multiplicand
           22B : 0000;  -- m16sB: DW 0 ; multipler
           22C : 0000;  -- m16sc: DW 0 ; carry
           22D : 0000;  -- mcnt16s: DW 0 ; counter
           22E : 0000;  -- mres16sL: DW 0 ; result low
           22F : 0000;  -- mres16sH: DW 0 ; result high
           230 : B800;  -- 	LOADI  0
           231 : 1268;  -- 	STORE  dres16sR     ; clear remainder result
           232 : 1265;  -- 	STORE  d16sC1       ; clear carry
           233 : 0A61;  -- 	LOAD   d16sN
           234 : 5A62;  -- 	XOR    d16sD
           235 : 1263;  -- 	STORE  d16sS        ; sign determination = N XOR D
           236 : B811;  -- 	LOADI  17
           237 : 1264;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           238 : 0A62;  -- 	LOAD   d16sD
           239 : 819E;  -- 	CALL   Abs          ; take absolute value of denominator
           23A : 1262;  -- 	STORE  d16sD
           23B : 0A61;  -- 	LOAD   d16sN
           23C : 819E;  -- 	CALL   Abs          ; take absolute value of numerator
           23D : 1261;  -- 	STORE  d16sN
           23E : 0A61;  -- 	LOAD   d16sN
           23F : 601F;  -- 	SHIFT  -15          ; get msb
           240 : 4AD5;  -- 	AND    One          ; only msb (because shift is arithmetic)
           241 : 1266;  -- 	STORE  d16sC2       ; store as carry
           242 : 0A61;  -- 	LOAD   d16sN
           243 : 6001;  -- 	SHIFT  1            ; shift <<1
           244 : 5265;  -- 	OR     d16sC1       ; with carry
           245 : 1261;  -- 	STORE  d16sN
           246 : 0A64;  -- 	LOAD   d16sT
           247 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           248 : 4258;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           249 : 1264;  -- 	STORE  d16sT
           24A : 0A68;  -- 	LOAD   dres16sR
           24B : 6001;  -- 	SHIFT  1            ; shift remainder
           24C : 5266;  -- 	OR     d16sC2       ; with carry from other shift
           24D : 2262;  -- 	SUB    d16sD        ; subtract denominator from remainder
           24E : 3253;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           24F : 1268;  -- 	STORE  dres16sR
           250 : B801;  -- 	LOADI  1
           251 : 1265;  -- 	STORE  d16sC1       ; set carry
           252 : 2A3E;  -- 	JUMP   Div16s_loop
           253 : 1A62;  -- 	ADD    d16sD        ; add denominator back in
           254 : 1268;  -- 	STORE  dres16sR
           255 : B800;  -- 	LOADI  0
           256 : 1265;  -- 	STORE  d16sC1       ; clear carry
           257 : 2A3E;  -- 	JUMP   Div16s_loop
           258 : 0A61;  -- 	LOAD   d16sN
           259 : 1267;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           25A : 0A63;  -- 	LOAD   d16sS        ; check the sign indicator
           25B : 325D;  -- 	JNEG   Div16s_neg
           25C : 8800;  -- 	RETURN
           25D : 0A67;  -- 	LOAD   dres16sQ     ; need to negate the result
           25E : 819F;  -- 	CALL   Neg
           25F : 1267;  -- 	STORE  dres16sQ
           260 : 8800;  -- 	RETURN	
           261 : 0000;  -- d16sN: DW 0 ; numerator
           262 : 0000;  -- d16sD: DW 0 ; denominator
           263 : 0000;  -- d16sS: DW 0 ; sign value
           264 : 0000;  -- d16sT: DW 0 ; temp counter
           265 : 0000;  -- d16sC1: DW 0 ; carry value
           266 : 0000;  -- d16sC2: DW 0 ; carry value
           267 : 0000;  -- dres16sQ: DW 0 ; quotient result
           268 : 0000;  -- dres16sR: DW 0 ; remainder result
           269 : 0A93;  -- 	LOAD   L2X
           26A : 819E;  -- 	CALL   Abs
           26B : 1295;  -- 	STORE  L2T1
           26C : 0A94;  -- 	LOAD   L2Y
           26D : 819E;  -- 	CALL   Abs
           26E : 2295;  -- 	SUB    L2T1
           26F : 328B;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           270 : 1A95;  -- 	ADD    L2T1
           271 : 122A;  -- 	STORE  m16sa
           272 : B8F6;  -- 	LOADI  246       ; max * 246
           273 : 122B;  -- 	STORE  m16sB
           274 : 8207;  -- 	CALL   Mult16s
           275 : 0A2F;  -- 	LOAD   mres16sH
           276 : 6008;  -- 	SHIFT  8
           277 : 1296;  -- 	STORE  L2T2
           278 : 0A2E;  -- 	LOAD   mres16sL
           279 : 6018;  -- 	SHIFT  -8        ; / 256
           27A : 4AE7;  -- 	AND    LowByte
           27B : 5296;  -- 	OR     L2T2
           27C : 1297;  -- 	STORE  L2T3
           27D : 0A95;  -- 	LOAD   L2T1
           27E : 122A;  -- 	STORE  m16sa
           27F : B868;  -- 	LOADI  104       ; min * 104
           280 : 122B;  -- 	STORE  m16sB
           281 : 8207;  -- 	CALL   Mult16s
           282 : 0A2F;  -- 	LOAD   mres16sH
           283 : 6008;  -- 	SHIFT  8
           284 : 1296;  -- 	STORE  L2T2
           285 : 0A2E;  -- 	LOAD   mres16sL
           286 : 6018;  -- 	SHIFT  -8        ; / 256
           287 : 4AE7;  -- 	AND    LowByte
           288 : 5296;  -- 	OR     L2T2
           289 : 1A97;  -- 	ADD    L2T3     ; sum
           28A : 8800;  -- 	RETURN
           28B : 1A95;  -- 	ADD    L2T1
           28C : 1296;  -- 	STORE  L2T2
           28D : 0A95;  -- 	LOAD   L2T1
           28E : 1297;  -- 	STORE  L2T3
           28F : 0A96;  -- 	LOAD   L2T2
           290 : 1295;  -- 	STORE  L2T1
           291 : 0A97;  -- 	LOAD   L2T3
           292 : 2A71;  -- 	JUMP   CalcDist
           293 : 0000;  -- L2X:  DW 0
           294 : 0000;  -- L2Y:  DW 0
           295 : 0000;  -- L2T1: DW 0
           296 : 0000;  -- L2T2: DW 0
           297 : 0000;  -- L2T3: DW 0
           298 : 9802;  -- 	OUT    TIMER
           299 : 9002;  -- 	IN     TIMER
           29A : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           29B : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           29C : 3299;  -- 	JNEG   Wloop
           29D : 8800;  -- 	RETURN
           29E : 82B6;  -- 	CALL   GetBattLvl
           29F : 429E;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           2A0 : 22F8;  -- 	SUB    MinBatt
           2A1 : 32A4;  -- 	JNEG   DeadBatt
           2A2 : 1AF8;  -- 	ADD    MinBatt     ; get original value back
           2A3 : 8800;  -- 	RETURN
           2A4 : B820;  -- 	LOADI  &H20
           2A5 : 980A;  -- 	OUT    BEEP        ; start beep sound
           2A6 : 82B6;  -- 	CALL   GetBattLvl  ; get the battery level
           2A7 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           2A8 : 9805;  -- 	OUT    SSEG2
           2A9 : 9806;  -- 	OUT    LCD
           2AA : 0AD4;  -- 	LOAD   Zero
           2AB : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           2AC : 9801;  -- 	OUT    LEDS        ; all LEDs on
           2AD : 9807;  -- 	OUT    XLEDS
           2AE : 8298;  -- 	CALL   Wait1       ; 1 second
           2AF : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           2B0 : 980A;  -- 	OUT    BEEP        ; stop beeping
           2B1 : 0AD4;  -- 	LOAD   Zero
           2B2 : 9801;  -- 	OUT    LEDS        ; LEDs off
           2B3 : 9807;  -- 	OUT    XLEDS
           2B4 : 8298;  -- 	CALL   Wait1       ; 1 second
           2B5 : 2AA4;  -- 	JUMP   DeadBatt    ; repeat forever
           2B6 : 0AFA;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           2B7 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           2B8 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           2B9 : 82C4;  -- 	CALL   BlockI2C    ; wait for it to finish
           2BA : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           2BB : 8800;  -- 	RETURN
           2BC : 82C4;  -- 	CALL   BlockI2C    ; wait for idle
           2BD : 0AF9;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           2BE : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           2BF : 0AD4;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           2C0 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           2C1 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           2C2 : 82C4;  -- 	CALL   BlockI2C    ; wait for it to finish
           2C3 : 8800;  -- 	RETURN
           2C4 : 0AD4;  -- 	LOAD   Zero
           2C5 : 12D2;  -- 	STORE  Temp        ; Used to check for timeout
           2C6 : 0AD2;  -- 	LOAD   Temp
           2C7 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           2C8 : 12D2;  -- 	STORE  Temp
           2C9 : 42CD;  -- 	JZERO  I2CError    ; Timeout occurred; error
           2CA : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           2CB : 3AC6;  -- 	JPOS   BI2CL       ; If not 0, try again
           2CC : 8800;  -- 	RETURN             ; Else return
           2CD : 0AD4;  -- 	LOAD   Zero
           2CE : 692C;  -- 	ADDI   &H12C       ; "I2C"
           2CF : 9804;  -- 	OUT    SSEG1
           2D0 : 9805;  -- 	OUT    SSEG2       ; display error message
           2D1 : 2ACD;  -- 	JUMP   I2CError
           2D2 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           2D3 : FFFF;  -- NegOne:   DW -1
           2D4 : 0000;  -- Zero:     DW 0
           2D5 : 0001;  -- One:      DW 1
           2D6 : 0002;  -- Two:      DW 2
           2D7 : 0003;  -- Three:    DW 3
           2D8 : 0004;  -- Four:     DW 4
           2D9 : 0005;  -- Five:     DW 5
           2DA : 0006;  -- Six:      DW 6
           2DB : 0007;  -- Seven:    DW 7
           2DC : 0008;  -- Eight:    DW 8
           2DD : 0009;  -- Nine:     DW 9
           2DE : 000A;  -- Ten:      DW 10
           2DF : 0001;  -- Mask0:    DW &B00000001
           2E0 : 0002;  -- Mask1:    DW &B00000010
           2E1 : 0004;  -- Mask2:    DW &B00000100
           2E2 : 0008;  -- Mask3:    DW &B00001000
           2E3 : 0010;  -- Mask4:    DW &B00010000
           2E4 : 0020;  -- Mask5:    DW &B00100000
           2E5 : 0040;  -- Mask6:    DW &B01000000
           2E6 : 0080;  -- Mask7:    DW &B10000000
           2E7 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2E8 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2E9 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           2EA : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2EB : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           2EC : 036F;  -- Ft3:      DW 879
           2ED : 0494;  -- Ft4:      DW 1172
           2EE : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2EF : 00B4;  -- Deg180:   DW 180       ; 180
           2F0 : 010E;  -- Deg270:   DW 270       ; 270
           2F1 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2F2 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2F3 : FF9C;  -- RSlow:    DW -100
           2F4 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2F5 : FEA2;  -- RMid:     DW -350
           2F6 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2F7 : FE0C;  -- RFast:    DW -500
           2F8 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2F9 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2FA : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           2FB : 0000;  -- State1Checker: DW 0
           2FC : 0000;  -- 	DW 0
  END;
