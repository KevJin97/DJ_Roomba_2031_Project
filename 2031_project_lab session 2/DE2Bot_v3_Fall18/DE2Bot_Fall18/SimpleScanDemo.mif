-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28ED;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A86;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10F3;  -- 	STORE  DVel        ; Reset API variables
           009 : 10F2;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 826E;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8250;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A95;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A92;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A92;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1284;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5284;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A93;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A86;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A002;  -- 	CLI    &B0010      ; disable the movement API interrupt
           027 : 809D;  -- 	CALL   AcquireData ; perform a 360 degree scan
           028 : B800;  -- 	LOADI  0
           029 : 10F3;  -- 	STORE  DVel        ; zero desired forward velocity
           02A : 90C2;  -- 	IN     THETA
           02B : 10F2;  -- 	STORE  DTheta      ; desired heading = current heading
           02C : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02D : 80C9;  -- 	CALL   FindClosest
           02E : 9805;  -- 	OUT    SSEG2       ; useful debugging info
           02F : 10F2;  -- 	STORE  DTheta
           030 : 824A;  -- 	CALL WAIT1
           031 : 08F2;  -- 	LOAD DTheta 
           032 : 6FF8;  -- 	ADDI -8
           033 : 10F2;  -- 	STORE DTheta
           034 : 824A;  -- 	CALL WAIT1
           035 : BF38;  -- 	LOADI  -200
           036 : 10F3;  -- 	STORE DVel 
           037 : B800;  -- 	LOADI 0
           038 : 12AD;  -- 	STORE State1Checker
           039 : 0AAD;  -- checkState:	LOAD State1Checker
           03A : 9805;  -- 			OUT SSEG2
           03B : 6FD8;  -- 			ADDI -40
           03C : 383E;  -- 			JPOS checkStateEnd
           03D : 2839;  -- 			JUMP checkState
           03E : 0A86;  -- checkStateEnd: LOAD Zero
           03F : 10F3;  -- 			   STORE DVel
           040 : 824A;  -- 			   CALL WAIT1	
           041 : 824A;  -- 	CALL WAIT1	   
           042 : 4800;  -- 	AND 0
           043 : A002;  -- 	CLI    &B0010 
           044 : 809D;  -- 	CALL   AcquireData 
           045 : B800;  -- 	LOADI  0
           046 : 10F3;  -- 	STORE  DVel
           047 : 90C2;  -- 	IN     THETA
           048 : 10F2;  -- 	STORE  DTheta 
           049 : A802;  -- 	SEI    &B0010
           04A : 80C9;  -- 	CALL FindClosest
           04B : 10F2;  -- 	STORE DTheta
           04C : 824A;  -- 	CALL WAIT1
           04D : 08F2;  -- 	LOAD DTheta 
           04E : 6FF8;  -- 	ADDI -8
           04F : 10F2;  -- 	STORE DTheta
           050 : 4800;  -- 	AND 0
           051 : B92C;  -- 	LOADI 300
           052 : 10F3;  -- 	STORE DVel
           053 : 0A94;  -- 	LOAD Mask3
           054 : 98B2;  -- 	OUT SONAREN	
           055 : 90AB;  -- 	IN Dist3
           056 : 6ED4;  -- 	ADDI -300
           057 : 3059;  -- 	JNEG EXIT1
           058 : 2855;  -- 	JUMP forNow
           059 : B800;  -- EXIT1:	LOADI 0
           05A : 10F3;  -- 	    STORE DVel   
           05B : 808C;  -- 	CALL PingLeft
           05C : 8093;  -- 	CALL PingRight 
           05D : 089A;  -- 	LOAD LeftDist
           05E : 189B;  -- 	ADD RightDist
           05F : 1065;  -- 	STORE lrsum
           060 : 0866;  -- 	LOAD discase
           061 : 0865;  -- 	LOAD lrsum
           062 : 2066;  -- 	SUB discase
           063 : 3078;  -- 	JNEG CASE2
           064 : 3867;  -- 	JPOS CASE1		
           065 : 0000;  -- lrsum: DW	0
           066 : 0FA0;  -- discase: DW 4000			
           067 : B8C1;  -- 	LOADI 193
           068 : 9804;  -- 	OUT SSEG1
           069 : 824A;  -- 	CALL WAIT1
           06A : BED4;  -- 	LOADI -300
           06B : 10F3;  -- 	STORE DVel
           06C : B800;  -- 	LOADI 0
           06D : 12AD;  -- 	STORE State1Checker
           06E : 0AAD;  -- 	LOAD State1Checker
           06F : 6FC4;  -- 	ADDI -60  
           070 : 3872;  -- 	JPOS SecondExit
           071 : 286E;  -- 	JUMP SecondMove
           072 : B800;  -- SecondExit: LOADI 0
           073 : 10F3;  -- 			STORE DVel 
           074 : 08F2;  -- 			LOAD DTheta
           075 : 685A;  -- 			ADDI 90
           076 : 10F2;  -- 			STORE DTheta
           077 : 287D;  -- 			JUMP FindHome
           078 : B8C2;  -- 	LOADI 194
           079 : 9804;  -- 	OUT SSEG1
           07A : 08F2;  -- 	LOAD DTHETA
           07B : 6F4C;  -- 	ADDI -180
           07C : 10F2;  -- 	STORE DTHETA
           07D : B92C;  -- 	LOADI 300
           07E : 10F3;  -- 	STORE DVel
           07F : 824A;  -- 	CALL WAIT1
           080 : 0A96;  -- 	LOAD Mask5
           081 : 98B2;  -- 	OUT SONAREN	
           082 : 8093;  -- 	CALL PingRight
           083 : 824A;  -- 	CALL WAIT1
           084 : 90AD;  -- 	IN Dist5
           085 : 9804;  -- 	OUT SSEG1
           086 : 21F4;  -- 	SUB 500
           087 : 9805;  -- 	OUT SSEG2
           088 : 308A;  -- 	JNEG EXIT2
           089 : 2882;  -- 	JUMP forNow1	
           08A : 80E4;  -- 	CALL Die
           08B : 288B;  -- 	JUMP   InfLoop
           08C : 824A;  -- 	CALL WAIT1
           08D : 0A91;  -- 	LOAD Mask0
           08E : 98B2;  -- 	OUT SONAREN
           08F : 824A;  -- 	CALL WAIT1
           090 : 90A8;  -- 	IN Dist0
           091 : 109A;  -- 	STORE LeftDist
           092 : 8800;  -- 	RETURN 
           093 : 824A;  -- 	CALL WAIT1
           094 : 0A96;  -- 	LOAD Mask5
           095 : 98B2;  -- 	OUT SONAREN
           096 : 824A;  -- 	CALL WAIT1
           097 : 90AD;  -- 	IN Dist5
           098 : 109B;  -- 	STORE RightDist
           099 : 8800;  -- 	RETURN 
           09A : 0000;  -- LeftDist:	DW	0
           09B : 0000;  -- RightDist:	DW	0
           09C : 0000;  -- currPing:	DW	0
           09D : 90C2;  -- 	IN     THETA
           09E : 10C6;  -- 	STORE  OrigTheta
           09F : 10C7;  -- 	STORE  CurrTheta
           0A0 : 0A86;  -- 	LOAD   Zero
           0A1 : 10C8;  -- 	STORE  TurnTracker
           0A2 : 0A91;  -- 	LOAD   Mask0
           0A3 : 98B2;  -- 	OUT    SONAREN
           0A4 : 0A86;  -- 	LOAD   Zero
           0A5 : 9883;  -- 	OUT    LVELCMD
           0A6 : 0AA4;  -- 	LOAD   FSlow
           0A7 : 988B;  -- 	OUT    RVELCMD
           0A8 : 90C2;  -- 	IN     Theta
           0A9 : 58C7;  -- 	XOR    CurrTheta
           0AA : 40A6;  -- 	JZERO  ADWait      ; same angle; wait until turned more
           0AB : 90C2;  -- 	IN     Theta
           0AC : 20C6;  -- 	SUB    OrigTheta
           0AD : 8150;  -- 	CALL   Abs
           0AE : 68B4;  -- 	ADDI   180         ; account for angle wrapping
           0AF : 814A;  -- 	CALL   Mod360
           0B0 : 6F4C;  -- 	ADDI   -180
           0B1 : 8150;  -- 	CALL   Abs
           0B2 : 6FF6;  -- 	ADDI   -10         ; 10 degree margin
           0B3 : 30B6;  -- 	JNEG   ADStore     ; margin not passed
           0B4 : B801;  -- 	LOADI  1           ; margin passed
           0B5 : 10C8;  -- 	STORE  TurnTracker
           0B6 : 90C2;  -- 	IN     THETA
           0B7 : 10C7;  -- 	STORE  CurrTheta   ; update current angle
           0B8 : 685A;  -- 	ADDI   90          ; since this sonar is facing left
           0B9 : 814A;  -- 	CALL   Mod360      ; wrap angles >360
           0BA : 6AAE;  -- 	ADDI   DataArray   ; index into the array
           0BB : 10C5;  -- 	STORE  ArrayIndex
           0BC : 90A8;  -- 	IN     DIST0
           0BD : 78C5;  -- 	ISTORE ArrayIndex  ; store this data point
           0BE : 08C8;  -- 	LOAD   TurnTracker
           0BF : 40A6;  -- 	JZERO  ADWait      ; haven't turned at all
           0C0 : 90C2;  -- 	IN     THETA
           0C1 : 58C6;  -- 	XOR    OrigTheta
           0C2 : 38A6;  -- 	JPOS   ADWait
           0C3 : 30A6;  -- 	JNEG   ADWait
           0C4 : 8800;  -- 	RETURN ; done
           0C5 : 0000;  -- 	ArrayIndex: DW 0
           0C6 : 0000;  -- 	OrigTheta: DW 0
           0C7 : 0000;  -- 	CurrTheta: DW 0
           0C8 : 0000;  -- 	TurnTracker: DW 0
           0C9 : BAAE;  -- 	LOADI  DataArray   ; get the array start address
           0CA : 10C5;  -- 	STORE  ArrayIndex
           0CB : 10E2;  -- 	STORE  CloseIndex  ; keep track of shortest distance
           0CC : 6968;  -- 	ADDI   360
           0CD : 10E1;  -- 	STORE  EndIndex
           0CE : 70C5;  -- 	ILOAD  ArrayIndex  ; get the first entry of array
           0CF : 10E3;  -- 	STORE  CloseVal    ; keep track of shortest distance
           0D0 : 08C5;  -- 	LOAD   ArrayIndex
           0D1 : 6801;  -- 	ADDI   1
           0D2 : 10C5;  -- 	STORE  ArrayIndex  ; move to next entry
           0D3 : 58E1;  -- 	XOR    EndIndex    ; compare with end index
           0D4 : 40DD;  -- 	JZERO  FCDone
           0D5 : 70C5;  -- 	ILOAD  ArrayIndex  ; get the data
           0D6 : 20E3;  -- 	SUB    CloseVal    ; compare with current min
           0D7 : 38D0;  -- 	JPOS   FCLoop      ; not closer; move on
           0D8 : 70C5;  -- 	ILOAD  ArrayIndex  ; new minimum
           0D9 : 10E3;  -- 	STORE  CloseVal
           0DA : 08C5;  -- 	LOAD   ArrayIndex
           0DB : 10E2;  -- 	STORE  CloseIndex
           0DC : 28D0;  -- 	JUMP   FCLoop
           0DD : BAAE;  -- 	LOADI  DataArray   ; start address
           0DE : 20E2;  -- 	SUB    CloseIndex  ; start address - entry address
           0DF : 8151;  -- 	CALL   Neg         ; entry address - start address
           0E0 : 8800;  -- 	RETURN
           0E1 : 0000;  -- 	EndIndex:   DW 0
           0E2 : 0000;  -- 	CloseIndex: DW 0
           0E3 : 0000;  -- 	CloseVal:   DW 0
           0E4 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           0E5 : 0A86;  -- 	LOAD   Zero        ; Stop everything.
           0E6 : 9883;  -- 	OUT    LVELCMD
           0E7 : 988B;  -- 	OUT    RVELCMD
           0E8 : 98B2;  -- 	OUT    SONAREN
           0E9 : 08EC;  -- 	LOAD   DEAD        ; An indication that we are dead
           0EA : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0EB : 28EB;  -- 	JUMP   Forever     ; Do this forever.
           0EC : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0ED : 80F4;  -- 	CALL   ControlMovement
           0EE : 0AAD;  -- 	LOAD State1Checker
           0EF : 6801;  -- 	ADDI 1
           0F0 : 12AD;  -- 	STORE State1Checker
           0F1 : B000;  -- 	RETI   ; return from ISR
           0F2 : 0000;  -- DTheta:    DW 0
           0F3 : 0000;  -- DVel:      DW 0
           0F4 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0F5 : 1134;  -- 	STORE  MaxVal
           0F6 : 8121;  -- 	CALL   GetThetaErr ; get the heading error
           0F7 : 6002;  -- 	SHIFT  2
           0F8 : 111E;  -- 	STORE  CMAErr      ; hold temporarily
           0F9 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0FA : 8128;  -- 	CALL   CapValue    ; get a +/- max of 50
           0FB : 191E;  -- 	ADD    CMAErr
           0FC : 111E;  -- 	STORE  CMAErr      ; now contains a desired differential
           0FD : B9FE;  -- 	LOADI  510
           0FE : 1134;  -- 	STORE  MaxVal
           0FF : 08F3;  -- 	LOAD   DVel
           100 : 8128;  -- 	CALL   CapValue    ; ensure velocity is valid
           101 : 10F3;  -- 	STORE  DVel        ; overwrite any invalid input
           102 : 191E;  -- 	ADD    CMAErr
           103 : 8128;  -- 	CALL   CapValue    ; ensure velocity is valid
           104 : 1120;  -- 	STORE  CMAR
           105 : 091E;  -- 	LOAD   CMAErr
           106 : 8151;  -- 	CALL   Neg         ; left wheel gets negative differential
           107 : 18F3;  -- 	ADD    DVel
           108 : 8128;  -- 	CALL   CapValue
           109 : 111F;  -- 	STORE  CMAL
           10A : 091E;  -- 	LOAD   CMAErr
           10B : 6001;  -- 	SHIFT  1           ; double the differential
           10C : 111E;  -- 	STORE  CMAErr
           10D : 0920;  -- 	LOAD   CMAR
           10E : 211F;  -- 	SUB    CMAL        ; calculate the actual differential
           10F : 211E;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           110 : 4119;  -- 	JZERO  CMADone
           111 : 111E;  -- 	STORE  CMAErr      ; the missing part
           112 : 191F;  -- 	ADD    CMAL
           113 : 8128;  -- 	CALL   CapValue
           114 : 111F;  -- 	STORE  CMAL
           115 : 0920;  -- 	LOAD   CMAR
           116 : 211E;  -- 	SUB    CMAErr
           117 : 8128;  -- 	CALL   CapValue
           118 : 1120;  -- 	STORE  CMAR
           119 : 091F;  -- 	LOAD   CMAL
           11A : 9883;  -- 	OUT    LVELCMD
           11B : 0920;  -- 	LOAD   CMAR
           11C : 988B;  -- 	OUT    RVELCMD
           11D : 8800;  -- 	RETURN
           11E : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           11F : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           120 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           121 : 90C2;  -- 	IN     THETA
           122 : 20F2;  -- 	SUB    DTheta      ; actual - desired angle
           123 : 8151;  -- 	CALL   Neg         ; desired - actual angle
           124 : 68B4;  -- 	ADDI   180
           125 : 814A;  -- 	CALL   Mod360
           126 : 6F4C;  -- 	ADDI   -180
           127 : 8800;  -- 	RETURN
           128 : 2134;  -- 	SUB     MaxVal
           129 : 392F;  -- 	JPOS    CapVelHigh
           12A : 1934;  -- 	ADD     MaxVal
           12B : 1934;  -- 	ADD     MaxVal
           12C : 3131;  -- 	JNEG    CapVelLow
           12D : 2134;  -- 	SUB     MaxVal
           12E : 8800;  -- 	RETURN
           12F : 0934;  -- 	LOAD    MaxVal
           130 : 8800;  -- 	RETURN
           131 : 0934;  -- 	LOAD    MaxVal
           132 : 8151;  -- 	CALL    Neg
           133 : 8800;  -- 	RETURN
           134 : 01FE;  -- 	MaxVal: DW 510
           135 : BAAE;  -- 	LOADI   DataArray
           136 : 10C5;  -- 	STORE   ArrayIndex
           137 : 6968;  -- 	ADDI    360
           138 : 1284;  -- 	STORE   Temp        ; Also store the end address
           139 : 9099;  -- 	IN      UART_RDY    ; get the UART status
           13A : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           13B : 3939;  -- 	JPOS    SDLoop1
           13C : 70C5;  -- 	ILOAD   ArrayIndex
           13D : 6018;  -- 	SHIFT   -8          ; move high byte to low byte
           13E : 9898;  -- 	OUT     UART_DAT
           13F : 9099;  -- 	IN      UART_RDY    ; get the UART status
           140 : 6019;  -- 	SHIFT   -9          ; check if the write buffer is full
           141 : 393F;  -- 	JPOS    SDLoop2
           142 : 70C5;  -- 	ILOAD   ArrayIndex
           143 : 9898;  -- 	OUT     UART_DAT    ; send low byte
           144 : 08C5;  -- 	LOAD    ArrayIndex
           145 : 6801;  -- 	ADDI    1           ; increment index
           146 : 10C5;  -- 	STORE   ArrayIndex
           147 : 2284;  -- 	SUB     Temp        ; check if at end of array
           148 : 3139;  -- 	JNEG    SDLoop1
           149 : 28E4;  -- 	JUMP    Die         ; when done, go to infinite loop
           14A : 314D;  -- 	JNEG   M360N
           14B : 6E98;  -- 	ADDI   -360
           14C : 294A;  -- 	JUMP   Mod360
           14D : 6968;  -- 	ADDI   360
           14E : 314D;  -- 	JNEG   M360N
           14F : 8800;  -- 	RETURN
           150 : 3953;  -- 	JPOS   Abs_r
           151 : 5A85;  -- 	XOR    NegOne       ; Flip all bits
           152 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           153 : 8800;  -- 	RETURN
           154 : 09B4;  -- 	LOAD   AtanY
           155 : 8150;  -- 	CALL   Abs          ; abs(y)
           156 : 11B6;  -- 	STORE  AtanT
           157 : 09B3;  -- 	LOAD   AtanX        ; abs(x)
           158 : 8150;  -- 	CALL   Abs
           159 : 21B6;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           15A : 3165;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           15B : 09B3;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           15C : 3162;  -- 	JNEG   A2_R3
           15D : 8174;  -- 	CALL   A2_calc      ; Octants 1, 8
           15E : 3160;  -- 	JNEG   A2_R1n
           15F : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           160 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           161 : 8800;  -- 	RETURN
           162 : 8174;  -- 	CALL   A2_calc      ; Octants 4, 5            
           163 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           164 : 8800;  -- 	RETURN
           165 : 09B4;  -- 	LOAD   AtanY        ; Swap input arguments
           166 : 11B6;  -- 	STORE  AtanT
           167 : 09B3;  -- 	LOAD   AtanX
           168 : 11B4;  -- 	STORE  AtanY
           169 : 09B6;  -- 	LOAD   AtanT
           16A : 11B3;  -- 	STORE  AtanX
           16B : 3970;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           16C : 8174;  -- 	CALL   A2_calc      ; else octants 6, 7
           16D : 8151;  -- 	CALL   Neg          ; Negatge the number
           16E : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           16F : 8800;  -- 	RETURN
           170 : 8174;  -- 	CALL   A2_calc      ; Octants 2, 3
           171 : 8151;  -- 	CALL   Neg          ; negate the angle
           172 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           173 : 8800;  -- 	RETURN
           174 : 09B4;  -- 	LOAD   AtanY
           175 : 1213;  -- 	STORE  d16sN        ; Y in numerator
           176 : 09B3;  -- 	LOAD   AtanX
           177 : 1214;  -- 	STORE  d16sD        ; X in denominator
           178 : 81A0;  -- 	CALL   A2_div       ; divide
           179 : 0A19;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           17A : 11B5;  -- 	STORE  AtanRatio
           17B : 11DC;  -- 	STORE  m16sA
           17C : 11DD;  -- 	STORE  m16sB
           17D : 8197;  -- 	CALL   A2_mult      ; X^2
           17E : 11DC;  -- 	STORE  m16sA
           17F : 09B7;  -- 	LOAD   A2c
           180 : 11DD;  -- 	STORE  m16sB
           181 : 8197;  -- 	CALL   A2_mult
           182 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           183 : 1214;  -- 	STORE  d16sD
           184 : 09B5;  -- 	LOAD   AtanRatio
           185 : 1213;  -- 	STORE  d16sN        ; Ratio in numerator
           186 : 81A0;  -- 	CALL   A2_div       ; divide
           187 : 0A19;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           188 : 11DC;  -- 	STORE  m16sA        ; <= result in radians
           189 : 09B8;  -- 	LOAD   A2cd         ; degree conversion factor
           18A : 11DD;  -- 	STORE  m16sB
           18B : 8197;  -- 	CALL   A2_mult      ; convert to degrees
           18C : 11B6;  -- 	STORE  AtanT
           18D : 6017;  -- 	SHIFT  -7           ; check 7th bit
           18E : 4A87;  -- 	AND    One
           18F : 4194;  -- 	JZERO  A2_rdwn      ; round down
           190 : 09B6;  -- 	LOAD   AtanT
           191 : 6018;  -- 	SHIFT  -8
           192 : 6801;  -- 	ADDI   1            ; round up
           193 : 8800;  -- 	RETURN
           194 : 09B6;  -- 	LOAD   AtanT
           195 : 6018;  -- 	SHIFT  -8           ; round down
           196 : 8800;  -- 	RETURN
           197 : 81B9;  -- 	CALL   Mult16s
           198 : 09E1;  -- 	LOAD   mres16sH
           199 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           19A : 11E1;  -- 	STORE  mres16sH
           19B : 09E0;  -- 	LOAD   mres16sL
           19C : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           19D : 4A99;  -- 	AND    LowByte
           19E : 51E1;  -- 	OR     mres16sH     ; combine high and low words of result
           19F : 8800;  -- 	RETURN
           1A0 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1A1 : 11B6;  -- 	STORE  AtanT
           1A2 : 09B6;  -- 	LOAD   AtanT
           1A3 : 6FFF;  -- 	ADDI   -1
           1A4 : 39A7;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1A5 : 81E2;  -- 	CALL   Div16s       ; do the standard division
           1A6 : 8800;  -- 	RETURN
           1A7 : 11B6;  -- 	STORE  AtanT
           1A8 : 0A13;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1A9 : 6001;  -- 	SHIFT  1
           1AA : 5A13;  -- 	XOR    d16sN        ; if the sign changed,
           1AB : 31AF;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1AC : 5A13;  -- 	XOR    d16sN        ; get back shifted version
           1AD : 1213;  -- 	STORE  d16sN
           1AE : 29A2;  -- 	JUMP   A2_DL
           1AF : 0A14;  -- 	LOAD   d16sD
           1B0 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1B1 : 1214;  -- 	STORE  d16sD
           1B2 : 29A2;  -- 	JUMP   A2_DL
           1B3 : 0000;  -- AtanX:      DW 0
           1B4 : 0000;  -- AtanY:      DW 0
           1B5 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1B6 : 0000;  -- AtanT:      DW 0        ; temporary value
           1B7 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1B8 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1B9 : B800;  -- 	LOADI  0
           1BA : 11DE;  -- 	STORE  m16sc        ; clear carry
           1BB : 11E1;  -- 	STORE  mres16sH     ; clear result
           1BC : B810;  -- 	LOADI  16           ; load 16 to counter
           1BD : 11DF;  -- 	STORE  mcnt16s      
           1BE : 09DE;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1BF : 41C3;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1C0 : 09E1;  -- 	LOAD   mres16sH     ; if a carry, 
           1C1 : 19DC;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1C2 : 11E1;  -- 	STORE  mres16sH
           1C3 : 09DD;  -- 	LOAD   m16sB
           1C4 : 4A87;  -- 	AND    One          ; check bit 0 of multiplier
           1C5 : 11DE;  -- 	STORE  m16sc        ; save as next carry
           1C6 : 41CA;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1C7 : 09E1;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1C8 : 21DC;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1C9 : 11E1;  -- 	STORE  mres16sH
           1CA : 09DD;  -- 	LOAD   m16sB
           1CB : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1CC : 49DB;  -- 	AND    c7FFF        ; clear msb
           1CD : 11DD;  -- 	STORE  m16sB
           1CE : 09E1;  -- 	LOAD   mres16sH     ; load result H
           1CF : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1D0 : 51DD;  -- 	OR     m16sB
           1D1 : 11DD;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1D2 : 09E1;  -- 	LOAD   mres16sH
           1D3 : 6011;  -- 	SHIFT  -1
           1D4 : 11E1;  -- 	STORE  mres16sH     ; shift result H >>1
           1D5 : 09DF;  -- 	LOAD   mcnt16s
           1D6 : 6FFF;  -- 	ADDI   -1           ; check counter
           1D7 : 39BD;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1D8 : 09DD;  -- 	LOAD   m16sB
           1D9 : 11E0;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1DA : 8800;  -- 	RETURN              ; Done
           1DB : 7FFF;  -- c7FFF: DW &H7FFF
           1DC : 0000;  -- m16sA: DW 0 ; multiplicand
           1DD : 0000;  -- m16sB: DW 0 ; multipler
           1DE : 0000;  -- m16sc: DW 0 ; carry
           1DF : 0000;  -- mcnt16s: DW 0 ; counter
           1E0 : 0000;  -- mres16sL: DW 0 ; result low
           1E1 : 0000;  -- mres16sH: DW 0 ; result high
           1E2 : B800;  -- 	LOADI  0
           1E3 : 121A;  -- 	STORE  dres16sR     ; clear remainder result
           1E4 : 1217;  -- 	STORE  d16sC1       ; clear carry
           1E5 : 0A13;  -- 	LOAD   d16sN
           1E6 : 5A14;  -- 	XOR    d16sD
           1E7 : 1215;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1E8 : B811;  -- 	LOADI  17
           1E9 : 1216;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1EA : 0A14;  -- 	LOAD   d16sD
           1EB : 8150;  -- 	CALL   Abs          ; take absolute value of denominator
           1EC : 1214;  -- 	STORE  d16sD
           1ED : 0A13;  -- 	LOAD   d16sN
           1EE : 8150;  -- 	CALL   Abs          ; take absolute value of numerator
           1EF : 1213;  -- 	STORE  d16sN
           1F0 : 0A13;  -- 	LOAD   d16sN
           1F1 : 601F;  -- 	SHIFT  -15          ; get msb
           1F2 : 4A87;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1F3 : 1218;  -- 	STORE  d16sC2       ; store as carry
           1F4 : 0A13;  -- 	LOAD   d16sN
           1F5 : 6001;  -- 	SHIFT  1            ; shift <<1
           1F6 : 5217;  -- 	OR     d16sC1       ; with carry
           1F7 : 1213;  -- 	STORE  d16sN
           1F8 : 0A16;  -- 	LOAD   d16sT
           1F9 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1FA : 420A;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1FB : 1216;  -- 	STORE  d16sT
           1FC : 0A1A;  -- 	LOAD   dres16sR
           1FD : 6001;  -- 	SHIFT  1            ; shift remainder
           1FE : 5218;  -- 	OR     d16sC2       ; with carry from other shift
           1FF : 2214;  -- 	SUB    d16sD        ; subtract denominator from remainder
           200 : 3205;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           201 : 121A;  -- 	STORE  dres16sR
           202 : B801;  -- 	LOADI  1
           203 : 1217;  -- 	STORE  d16sC1       ; set carry
           204 : 29F0;  -- 	JUMP   Div16s_loop
           205 : 1A14;  -- 	ADD    d16sD        ; add denominator back in
           206 : 121A;  -- 	STORE  dres16sR
           207 : B800;  -- 	LOADI  0
           208 : 1217;  -- 	STORE  d16sC1       ; clear carry
           209 : 29F0;  -- 	JUMP   Div16s_loop
           20A : 0A13;  -- 	LOAD   d16sN
           20B : 1219;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           20C : 0A15;  -- 	LOAD   d16sS        ; check the sign indicator
           20D : 320F;  -- 	JNEG   Div16s_neg
           20E : 8800;  -- 	RETURN
           20F : 0A19;  -- 	LOAD   dres16sQ     ; need to negate the result
           210 : 8151;  -- 	CALL   Neg
           211 : 1219;  -- 	STORE  dres16sQ
           212 : 8800;  -- 	RETURN	
           213 : 0000;  -- d16sN: DW 0 ; numerator
           214 : 0000;  -- d16sD: DW 0 ; denominator
           215 : 0000;  -- d16sS: DW 0 ; sign value
           216 : 0000;  -- d16sT: DW 0 ; temp counter
           217 : 0000;  -- d16sC1: DW 0 ; carry value
           218 : 0000;  -- d16sC2: DW 0 ; carry value
           219 : 0000;  -- dres16sQ: DW 0 ; quotient result
           21A : 0000;  -- dres16sR: DW 0 ; remainder result
           21B : 0A45;  -- 	LOAD   L2X
           21C : 8150;  -- 	CALL   Abs
           21D : 1247;  -- 	STORE  L2T1
           21E : 0A46;  -- 	LOAD   L2Y
           21F : 8150;  -- 	CALL   Abs
           220 : 2247;  -- 	SUB    L2T1
           221 : 323D;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           222 : 1A47;  -- 	ADD    L2T1
           223 : 11DC;  -- 	STORE  m16sa
           224 : B8F6;  -- 	LOADI  246       ; max * 246
           225 : 11DD;  -- 	STORE  m16sB
           226 : 81B9;  -- 	CALL   Mult16s
           227 : 09E1;  -- 	LOAD   mres16sH
           228 : 6008;  -- 	SHIFT  8
           229 : 1248;  -- 	STORE  L2T2
           22A : 09E0;  -- 	LOAD   mres16sL
           22B : 6018;  -- 	SHIFT  -8        ; / 256
           22C : 4A99;  -- 	AND    LowByte
           22D : 5248;  -- 	OR     L2T2
           22E : 1249;  -- 	STORE  L2T3
           22F : 0A47;  -- 	LOAD   L2T1
           230 : 11DC;  -- 	STORE  m16sa
           231 : B868;  -- 	LOADI  104       ; min * 104
           232 : 11DD;  -- 	STORE  m16sB
           233 : 81B9;  -- 	CALL   Mult16s
           234 : 09E1;  -- 	LOAD   mres16sH
           235 : 6008;  -- 	SHIFT  8
           236 : 1248;  -- 	STORE  L2T2
           237 : 09E0;  -- 	LOAD   mres16sL
           238 : 6018;  -- 	SHIFT  -8        ; / 256
           239 : 4A99;  -- 	AND    LowByte
           23A : 5248;  -- 	OR     L2T2
           23B : 1A49;  -- 	ADD    L2T3     ; sum
           23C : 8800;  -- 	RETURN
           23D : 1A47;  -- 	ADD    L2T1
           23E : 1248;  -- 	STORE  L2T2
           23F : 0A47;  -- 	LOAD   L2T1
           240 : 1249;  -- 	STORE  L2T3
           241 : 0A48;  -- 	LOAD   L2T2
           242 : 1247;  -- 	STORE  L2T1
           243 : 0A49;  -- 	LOAD   L2T3
           244 : 2A23;  -- 	JUMP   CalcDist
           245 : 0000;  -- L2X:  DW 0
           246 : 0000;  -- L2Y:  DW 0
           247 : 0000;  -- L2T1: DW 0
           248 : 0000;  -- L2T2: DW 0
           249 : 0000;  -- L2T3: DW 0
           24A : 9802;  -- 	OUT    TIMER
           24B : 9002;  -- 	IN     TIMER
           24C : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           24D : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           24E : 324B;  -- 	JNEG   Wloop
           24F : 8800;  -- 	RETURN
           250 : 8268;  -- 	CALL   GetBattLvl
           251 : 4250;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           252 : 22AA;  -- 	SUB    MinBatt
           253 : 3256;  -- 	JNEG   DeadBatt
           254 : 1AAA;  -- 	ADD    MinBatt     ; get original value back
           255 : 8800;  -- 	RETURN
           256 : B820;  -- 	LOADI  &H20
           257 : 980A;  -- 	OUT    BEEP        ; start beep sound
           258 : 8268;  -- 	CALL   GetBattLvl  ; get the battery level
           259 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           25A : 9805;  -- 	OUT    SSEG2
           25B : 9806;  -- 	OUT    LCD
           25C : 0A86;  -- 	LOAD   Zero
           25D : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           25E : 9801;  -- 	OUT    LEDS        ; all LEDs on
           25F : 9807;  -- 	OUT    XLEDS
           260 : 824A;  -- 	CALL   Wait1       ; 1 second
           261 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           262 : 980A;  -- 	OUT    BEEP        ; stop beeping
           263 : 0A86;  -- 	LOAD   Zero
           264 : 9801;  -- 	OUT    LEDS        ; LEDs off
           265 : 9807;  -- 	OUT    XLEDS
           266 : 824A;  -- 	CALL   Wait1       ; 1 second
           267 : 2A56;  -- 	JUMP   DeadBatt    ; repeat forever
           268 : 0AAC;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           269 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           26A : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           26B : 8276;  -- 	CALL   BlockI2C    ; wait for it to finish
           26C : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           26D : 8800;  -- 	RETURN
           26E : 8276;  -- 	CALL   BlockI2C    ; wait for idle
           26F : 0AAB;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           270 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           271 : 0A86;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           272 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           273 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           274 : 8276;  -- 	CALL   BlockI2C    ; wait for it to finish
           275 : 8800;  -- 	RETURN
           276 : 0A86;  -- 	LOAD   Zero
           277 : 1284;  -- 	STORE  Temp        ; Used to check for timeout
           278 : 0A84;  -- 	LOAD   Temp
           279 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           27A : 1284;  -- 	STORE  Temp
           27B : 427F;  -- 	JZERO  I2CError    ; Timeout occurred; error
           27C : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           27D : 3A78;  -- 	JPOS   BI2CL       ; If not 0, try again
           27E : 8800;  -- 	RETURN             ; Else return
           27F : 0A86;  -- 	LOAD   Zero
           280 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           281 : 9804;  -- 	OUT    SSEG1
           282 : 9805;  -- 	OUT    SSEG2       ; display error message
           283 : 2A7F;  -- 	JUMP   I2CError
           284 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           285 : FFFF;  -- NegOne:   DW -1
           286 : 0000;  -- Zero:     DW 0
           287 : 0001;  -- One:      DW 1
           288 : 0002;  -- Two:      DW 2
           289 : 0003;  -- Three:    DW 3
           28A : 0004;  -- Four:     DW 4
           28B : 0005;  -- Five:     DW 5
           28C : 0006;  -- Six:      DW 6
           28D : 0007;  -- Seven:    DW 7
           28E : 0008;  -- Eight:    DW 8
           28F : 0009;  -- Nine:     DW 9
           290 : 000A;  -- Ten:      DW 10
           291 : 0001;  -- Mask0:    DW &B00000001
           292 : 0002;  -- Mask1:    DW &B00000010
           293 : 0004;  -- Mask2:    DW &B00000100
           294 : 0008;  -- Mask3:    DW &B00001000
           295 : 0010;  -- Mask4:    DW &B00010000
           296 : 0020;  -- Mask5:    DW &B00100000
           297 : 0040;  -- Mask6:    DW &B01000000
           298 : 0080;  -- Mask7:    DW &B10000000
           299 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           29A : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           29B : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           29C : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           29D : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           29E : 036F;  -- Ft3:      DW 879
           29F : 0494;  -- Ft4:      DW 1172
           2A0 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2A1 : 00B4;  -- Deg180:   DW 180       ; 180
           2A2 : 010E;  -- Deg270:   DW 270       ; 270
           2A3 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2A4 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2A5 : FF9C;  -- RSlow:    DW -100
           2A6 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2A7 : FEA2;  -- RMid:     DW -350
           2A8 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2A9 : FE0C;  -- RFast:    DW -500
           2AA : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2AB : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2AC : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           2AD : 0000;  -- State1Checker: DW 0
           2AE : 0000;  -- 	DW 0
  END;
